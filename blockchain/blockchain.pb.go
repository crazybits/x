// Code generated by protoc-gen-go.
// source: github.com/crazybits/x/blockchain/blockchain.proto
// DO NOT EDIT!

/*
Package blockchain is a generated protocol buffer package.

It is generated from these files:
	github.com/crazybits/x/blockchain/blockchain.proto

It has these top-level messages:
	Block
	BlockHeader
	Transaction
	Operation
	DepositOperation
	WithdrawOperation
	Address
	BlockchainInfo
*/
package blockchain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import crypto "github.com/crazybits/x/crypto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OperationType int32

const (
	OperationType_Deposit  OperationType = 0
	OperationType_Withdraw OperationType = 1
)

var OperationType_name = map[int32]string{
	0: "Deposit",
	1: "Withdraw",
}
var OperationType_value = map[string]int32{
	"Deposit":  0,
	"Withdraw": 1,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}
func (OperationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Block struct {
	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockHeader struct {
	Time      *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Number    int64                      `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	Nance     []byte                     `protobuf:"bytes,3,opt,name=nance,proto3" json:"nance,omitempty"`
	PrevHash  []byte                     `protobuf:"bytes,4,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	CurrHash  []byte                     `protobuf:"bytes,5,opt,name=currHash,proto3" json:"currHash,omitempty"`
	Signature *crypto.Signature          `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	Signee    *crypto.PublicKey          `protobuf:"bytes,7,opt,name=signee" json:"signee,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockHeader) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *BlockHeader) GetSignature() *crypto.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BlockHeader) GetSignee() *crypto.PublicKey {
	if m != nil {
		return m.Signee
	}
	return nil
}

type Transaction struct {
	Operations []*Operation        `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
	Signatures []*crypto.Signature `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *Transaction) GetSignatures() []*crypto.Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type Operation struct {
	Type    OperationType `protobuf:"varint,1,opt,name=type,enum=blockchain.OperationType" json:"type,omitempty"`
	Payload []byte        `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DepositOperation struct {
	Receiver *Address `protobuf:"bytes,1,opt,name=receiver" json:"receiver,omitempty"`
	Amount   int64    `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Symbol   string   `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *DepositOperation) Reset()                    { *m = DepositOperation{} }
func (m *DepositOperation) String() string            { return proto.CompactTextString(m) }
func (*DepositOperation) ProtoMessage()               {}
func (*DepositOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DepositOperation) GetReceiver() *Address {
	if m != nil {
		return m.Receiver
	}
	return nil
}

type WithdrawOperation struct {
	Sender *Address `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Amount int64    `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Symbol string   `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *WithdrawOperation) Reset()                    { *m = WithdrawOperation{} }
func (m *WithdrawOperation) String() string            { return proto.CompactTextString(m) }
func (*WithdrawOperation) ProtoMessage()               {}
func (*WithdrawOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WithdrawOperation) GetSender() *Address {
	if m != nil {
		return m.Sender
	}
	return nil
}

type Address struct {
	AddressByte []byte `protobuf:"bytes,1,opt,name=addressByte,proto3" json:"addressByte,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type BlockchainInfo struct {
	Height            uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	CurrentBlockHash  []byte `protobuf:"bytes,2,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	PreviousBlockHash []byte `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
}

func (m *BlockchainInfo) Reset()                    { *m = BlockchainInfo{} }
func (m *BlockchainInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockchainInfo) ProtoMessage()               {}
func (*BlockchainInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Block)(nil), "blockchain.Block")
	proto.RegisterType((*BlockHeader)(nil), "blockchain.BlockHeader")
	proto.RegisterType((*Transaction)(nil), "blockchain.Transaction")
	proto.RegisterType((*Operation)(nil), "blockchain.Operation")
	proto.RegisterType((*DepositOperation)(nil), "blockchain.DepositOperation")
	proto.RegisterType((*WithdrawOperation)(nil), "blockchain.WithdrawOperation")
	proto.RegisterType((*Address)(nil), "blockchain.Address")
	proto.RegisterType((*BlockchainInfo)(nil), "blockchain.BlockchainInfo")
	proto.RegisterEnum("blockchain.OperationType", OperationType_name, OperationType_value)
}

func init() { proto.RegisterFile("github.com/crazybits/x/blockchain/blockchain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x25, 0xbb, 0xdd, 0xb4, 0x9d, 0x96, 0x55, 0x6b, 0xbe, 0x42, 0x2f, 0x54, 0x39, 0x95, 0x2e,
	0x24, 0xa2, 0x88, 0x13, 0x27, 0x2a, 0x0e, 0x8b, 0x38, 0x80, 0x4c, 0x25, 0xce, 0x4e, 0xe2, 0x6d,
	0x2c, 0x9a, 0x38, 0xb2, 0x9d, 0x5d, 0xc2, 0x91, 0x3f, 0x0e, 0x8a, 0xed, 0x7c, 0x94, 0x5d, 0x90,
	0x38, 0x35, 0xcf, 0xef, 0x75, 0x9e, 0xe7, 0xcd, 0x18, 0x36, 0x7b, 0xa6, 0xd2, 0x32, 0x0a, 0x62,
	0x9e, 0x85, 0xb1, 0x20, 0x3f, 0xaa, 0x88, 0x29, 0x19, 0x7e, 0x0f, 0xa3, 0x03, 0x8f, 0xbf, 0xc5,
	0x29, 0x61, 0x79, 0xef, 0x33, 0x28, 0x04, 0x57, 0x1c, 0x41, 0x77, 0xb2, 0x78, 0xb6, 0xe7, 0x7c,
	0x7f, 0xa0, 0xa1, 0x66, 0xa2, 0xf2, 0x2a, 0x54, 0x2c, 0xa3, 0x52, 0x91, 0xac, 0x30, 0xe2, 0xc5,
	0xfa, 0x2f, 0x06, 0xb1, 0xa8, 0x0a, 0xc5, 0xed, 0x8f, 0xd1, 0xfa, 0x25, 0x9c, 0x6d, 0xeb, 0xd2,
	0x28, 0x04, 0x37, 0xa5, 0x24, 0xa1, 0xc2, 0x73, 0x96, 0xce, 0x6a, 0xb2, 0x79, 0x12, 0xf4, 0x2e,
	0xa1, 0x25, 0x97, 0x9a, 0xc6, 0x56, 0x86, 0xde, 0xc2, 0x54, 0x09, 0x92, 0x4b, 0x12, 0x2b, 0xc6,
	0x73, 0xe9, 0x9d, 0x2c, 0x4f, 0xff, 0xfc, 0xdb, 0xae, 0xe3, 0xf1, 0x91, 0xd8, 0xff, 0xe5, 0xc0,
	0xa4, 0x57, 0x14, 0x05, 0x30, 0xa8, 0xbb, 0xb0, 0xde, 0x8b, 0xc0, 0xb4, 0x18, 0x34, 0x2d, 0x06,
	0xbb, 0xa6, 0x45, 0xac, 0x75, 0xe8, 0x31, 0xb8, 0x79, 0x99, 0x45, 0x54, 0x78, 0x27, 0x4b, 0x67,
	0x75, 0x8a, 0x2d, 0x42, 0x0f, 0xe1, 0x2c, 0x27, 0x79, 0x4c, 0xbd, 0xd3, 0xa5, 0xb3, 0x9a, 0x62,
	0x03, 0xd0, 0x02, 0x46, 0x85, 0xa0, 0xd7, 0x97, 0x44, 0xa6, 0xde, 0x40, 0x13, 0x2d, 0xae, 0xb9,
	0xb8, 0x14, 0x42, 0x73, 0x67, 0x86, 0x6b, 0x30, 0x0a, 0x61, 0x2c, 0xd9, 0x3e, 0x27, 0xaa, 0x14,
	0xd4, 0x73, 0xf5, 0xd5, 0xe6, 0x81, 0x8d, 0xef, 0x4b, 0x43, 0xe0, 0x4e, 0x83, 0x9e, 0x83, 0x5b,
	0x03, 0x4a, 0xbd, 0xe1, 0xb1, 0xfa, 0x73, 0x19, 0x1d, 0x58, 0xfc, 0x91, 0x56, 0xd8, 0x0a, 0xfc,
	0x1b, 0x98, 0xf4, 0xe2, 0x41, 0x6f, 0x00, 0x78, 0x41, 0x05, 0x31, 0x59, 0x3a, 0x3a, 0xcb, 0x47,
	0xfd, 0x2c, 0x3f, 0x35, 0x2c, 0xee, 0x09, 0xd1, 0x2b, 0x80, 0xd6, 0xbd, 0x19, 0xc1, 0x1d, 0x57,
	0xec, 0x89, 0xfc, 0x1d, 0x8c, 0xdb, 0x5a, 0xe8, 0x25, 0x0c, 0x54, 0x55, 0x98, 0xdc, 0xcf, 0x37,
	0x4f, 0xef, 0x34, 0xdc, 0x55, 0x05, 0xc5, 0x5a, 0x86, 0x3c, 0x18, 0x16, 0xa4, 0x3a, 0x70, 0x92,
	0xe8, 0xdc, 0xa7, 0xb8, 0x81, 0xbe, 0x84, 0xd9, 0x7b, 0x5a, 0x70, 0xc9, 0x54, 0x57, 0x3c, 0x84,
	0x91, 0xa0, 0x31, 0x65, 0xd7, 0xed, 0x52, 0x3d, 0xe8, 0x1b, 0xbc, 0x4b, 0x12, 0x41, 0xa5, 0xc4,
	0xad, 0xa8, 0x9e, 0x2a, 0xc9, 0x78, 0x99, 0xab, 0x66, 0xaa, 0x06, 0xd5, 0xe7, 0xb2, 0xca, 0x22,
	0x7e, 0xd0, 0x63, 0x1d, 0x63, 0x8b, 0xfc, 0x02, 0xe6, 0x5f, 0x99, 0x4a, 0x13, 0x41, 0x6e, 0x3a,
	0xd7, 0x0b, 0x70, 0x25, 0xcd, 0x93, 0x7f, 0x7b, 0x5a, 0xc9, 0x7f, 0x3b, 0x5e, 0xc0, 0xd0, 0x96,
	0x40, 0x4b, 0x98, 0x10, 0xf3, 0xb9, 0xad, 0x94, 0x49, 0x70, 0x8a, 0xfb, 0x47, 0xfe, 0x4f, 0x07,
	0xce, 0xb7, 0xad, 0xf7, 0x87, 0xfc, 0x8a, 0xd7, 0x75, 0x53, 0xca, 0xf6, 0xa9, 0xd2, 0xfa, 0x01,
	0xb6, 0x08, 0xad, 0x61, 0x56, 0x6f, 0x1d, 0xcd, 0x95, 0x79, 0x15, 0xf5, 0x36, 0x9a, 0x84, 0x6f,
	0x9d, 0xa3, 0x17, 0x30, 0xaf, 0xb7, 0x97, 0xf1, 0x52, 0x76, 0x62, 0xb3, 0xef, 0xb7, 0x89, 0xf5,
	0x1a, 0xee, 0x1f, 0x4d, 0x12, 0x4d, 0x60, 0x68, 0x27, 0x35, 0xbb, 0x87, 0xa6, 0x30, 0x6a, 0x12,
	0x9c, 0x39, 0x91, 0xab, 0xdf, 0xdb, 0xeb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x47, 0x8d,
	0x7a, 0xa2, 0x04, 0x00, 0x00,
}
