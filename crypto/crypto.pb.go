// Code generated by protoc-gen-go.
// source: crypto.proto
// DO NOT EDIT!

/*
Package crypto is a generated protocol buffer package.

It is generated from these files:
	crypto.proto

It has these top-level messages:
	PublicKey
	PrivateKey
	Signature
*/
package crypto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CryptoType int32

const (
	CryptoType_ECDSA CryptoType = 0
	CryptoType_RSA   CryptoType = 1
	CryptoType_DSA   CryptoType = 2
)

var CryptoType_name = map[int32]string{
	0: "ECDSA",
	1: "RSA",
	2: "DSA",
}
var CryptoType_value = map[string]int32{
	"ECDSA": 0,
	"RSA":   1,
	"DSA":   2,
}

func (x CryptoType) String() string {
	return proto.EnumName(CryptoType_name, int32(x))
}
func (CryptoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PublicKey struct {
	Type CryptoType `protobuf:"varint,1,opt,name=type,enum=crypto.CryptoType" json:"type,omitempty"`
	Key  []byte     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PrivateKey struct {
	Type CryptoType `protobuf:"varint,1,opt,name=type,enum=crypto.CryptoType" json:"type,omitempty"`
	Key  []byte     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PrivateKey) Reset()                    { *m = PrivateKey{} }
func (m *PrivateKey) String() string            { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()               {}
func (*PrivateKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Signature struct {
	Type CryptoType `protobuf:"varint,1,opt,name=type,enum=crypto.CryptoType" json:"type,omitempty"`
	R    []byte     `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
	S    []byte     `protobuf:"bytes,3,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*PublicKey)(nil), "crypto.PublicKey")
	proto.RegisterType((*PrivateKey)(nil), "crypto.PrivateKey")
	proto.RegisterType((*Signature)(nil), "crypto.Signature")
	proto.RegisterEnum("crypto.CryptoType", CryptoType_name, CryptoType_value)
}

func init() { proto.RegisterFile("crypto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2e, 0xaa, 0x2c,
	0x28, 0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x5c, 0xb9, 0x38,
	0x03, 0x4a, 0x93, 0x72, 0x32, 0x93, 0xbd, 0x53, 0x2b, 0x85, 0xd4, 0xb8, 0x58, 0x4a, 0x2a, 0x0b,
	0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x84, 0xf4, 0xa0, 0x3a, 0x9c, 0xc1, 0x54, 0x48,
	0x65, 0x41, 0x6a, 0x10, 0x58, 0x5e, 0x48, 0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x52, 0x82, 0x49, 0x81,
	0x51, 0x83, 0x27, 0x08, 0xc4, 0x54, 0x72, 0xe3, 0xe2, 0x0a, 0x28, 0xca, 0x2c, 0x4b, 0x2c, 0x49,
	0xa5, 0xcc, 0x1c, 0x7f, 0x2e, 0xce, 0xe0, 0xcc, 0xf4, 0xbc, 0xc4, 0x92, 0xd2, 0xa2, 0x54, 0xa2,
	0x8d, 0xe1, 0xe1, 0x62, 0x2c, 0x82, 0x1a, 0xc2, 0x58, 0x04, 0xe2, 0x15, 0x4b, 0x30, 0x43, 0x78,
	0xc5, 0x5a, 0x9a, 0x5c, 0x5c, 0x08, 0xf5, 0x42, 0x9c, 0x5c, 0xac, 0xae, 0xce, 0x2e, 0xc1, 0x8e,
	0x02, 0x0c, 0x42, 0xec, 0x5c, 0xcc, 0x41, 0xc1, 0x8e, 0x02, 0x8c, 0x20, 0x06, 0x48, 0x84, 0x29,
	0x89, 0x0d, 0x1c, 0x32, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x47, 0xb8, 0x32, 0x29,
	0x01, 0x00, 0x00,
}
